---
title: "BEE 4750/5750 Homework 2"
author: "Katrina Chen (kc778)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia

#function for calculating DO concentrations
function do_conc(c_s, c_0, b_0, n_0, k_a, k_c, k_n, x, u)
  a_1 = exp(-k_a*x/U)
  a_2 = (k_c/(k_a-k_c)) * (exp(-k_c*x/u) - exp(-k_a*x/U))
  a_3 = (k_n/(k_a-k_n)) * (exp(-k_n*x/u) - exp(-k_a*x/U))

  c_x = c_s * (1 - a_1) + (c_0 * a_1) - (b_0 * a_2) - (n_0 * a_3)
  b_x = b_0 * (exp(-k_c*x/u))
  n_x = n_0 * (exp(-k_n*x/u))

  return c_x, b_x, n_x

end

#initializing
c = zeros(51);
b = zeros(51);
n = zeros(51);

#initial concentrations at source 1
c_1 = ((1000*100000*7.5) + (1000*10000*5)) / ((1000*100000) + (1000*10000));
b_1 = ((1000*100000*5) + (1000*10000*50)) / ((1000*100000) + (1000*10000));
n_1 = ((1000*100000*5) + (1000*10000*35)) / ((1000*100000) + (1000*10000));

c[1] = c_1;
b[1] = b_1;
n[1] = n_1;

#concentrations between source 1 and 2
for i in 2:16
  c[i], b[i], b[i] = do_conc(10, c_1, b_1, n_1, 0.55, 0.35, 0.25, i-1, 6)
end

#initial concentrations at source 2
c_2 = ((1000*110000*c[16]) + (1000*15000*5)) / ((1000*110000) + (1000*15000));
b_2 = ((1000*110000*b[16]) + (1000*15000*45)) / ((1000*110000) + (1000*15000));
n_2 = ((1000*110000*n[16]) + (1000*15000*35)) / ((1000*110000) + (1000*15000));

#concentrations from source 2 until 50 km
for i in 16:51
  c[i], b[i], b[i] = do_conc(10, c_2, b_2, n_2, 0.55, 0.35, 0.25, i-16, 6)
end

#plot of DO concentrations
using Plots
x = LinRange(0,50,51)
plot(x, c, title="DO Concentrations over 50 km", ylabel="Distance(km)", xlabel="DO Concentration(mg/L)", legend=false)

```

## Problem 1.2
```julia

```

## Problem 1.3
```julia

```

## Problem 1.4
```julia

```

## Problem 1.5
```julia

```

## Problem 1.6
```julia

```

## Problem 1.7

```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end
```

## Problem 1.8


```

# References