---
title: "BEE 4750/5750 Homework 2"
author: "Katrina Chen (kc778)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia

#function for calculating DO concentrations
function do_conc(c_s, c_0, b_0, n_0, k_a, k_c, k_n, x, u)
  a_1 = exp(-k_a*x/u)
  a_2 = (k_c/(k_a-k_c)) * (exp(-k_c*x/u) - exp(-k_a*x/u))
  a_3 = (k_n/(k_a-k_n)) * (exp(-k_n*x/u) - exp(-k_a*x/u))

  c_x = c_s * (1 - a_1) + (c_0 * a_1) - (b_0 * a_2) - (n_0 * a_3)
  b_x = b_0 * (exp(-k_c*x/u))
  n_x = n_0 * (exp(-k_n*x/u))

  return c_x, b_x, n_x

end

#initializing
c = zeros(51);
b = zeros(51);
n = zeros(51);

#initial concentrations at source 1
c_1 = ((1000*100000*7.5) + (1000*10000*5)) / ((1000*100000) + (1000*10000));
b_1 = ((1000*100000*5) + (1000*10000*50)) / ((1000*100000) + (1000*10000));
n_1 = ((1000*100000*5) + (1000*10000*35)) / ((1000*100000) + (1000*10000));

c[1] = c_1;
b[1] = b_1;
n[1] = n_1;

#concentrations between source 1 and 2
for i in 2:16
  c[i], b[i], b[i] = do_conc(10, c_1, b_1, n_1, 0.55, 0.35, 0.25, i-1, 6)
end

#initial concentrations at source 2
c_2 = ((1000*110000*c[16]) + (1000*15000*5)) / ((1000*110000) + (1000*15000));
b_2 = ((1000*110000*b[16]) + (1000*15000*45)) / ((1000*110000) + (1000*15000));
n_2 = ((1000*110000*n[16]) + (1000*15000*35)) / ((1000*110000) + (1000*15000));

#concentrations from source 2 until 50 km
for i in 16:51
  c[i], b[i], b[i] = do_conc(10, c_2, b_2, n_2, 0.55, 0.35, 0.25, i-16, 6)
end

#plot of DO concentrations
using Plots
x = LinRange(0,50,51);
plot(x, c, title="DO Concentrations over 50 km", xlabel="Distance (km)", ylabel="DO Concentration (mg/L)", label="DO concentration")

```

## Problem 1.2
```julia
dist = 16;

while c[dist] < 6
  global dist += 1
end

dist_2 = dist - 15; 

println(dist_2)
println(c[dist])

```

The distance (km) from waste stream 2 for the DO concentration of the river to recover to 6 mg/L is 
```julia
println(dist_2)
```

The concentration (mg/L) at that distance is 
```julia
println(c[dist])
```

## Problem 1.3
```julia

function min(e_1, e_2, c_s, c_0, b_0, n_0, c_1, b_1, n_1, c_2, b_2, n_2, k_a, k_c, k_n, u)
  
  #initial concentrations of source 1 with treatment
  c_ts1 = (1-(e_1/100)) * c_1
  b_ts1 = (1-(e_1/100)) * b_1
  n_ts1 = (1-(e_1/100)) * n_1

  #initial concentrations at source 1 with treatment
  c_t1 = ((1000*100000*c_0) + (1000*10000*c_ts1)) / ((1000*100000) + (1000*10000))
  b_t1 = ((1000*100000*b_0) + (1000*10000*b_ts1)) / ((1000*100000) + (1000*10000))
  n_t1 = ((1000*100000*n_0) + (1000*10000*n_ts1)) / ((1000*100000) + (1000*10000))

  #concentrations at x = 15km
  c_15, b_15, n_15 = do_conc(c_s, c_t1, b_t1, n_t1, k_a, k_c, k_n, 15, u)

  #initial concentrations of source 2 with treatment
  c_ts2 = (1-(e_2/100)) * c_2
  b_ts2 = (1-(e_2/100)) * b_2
  n_ts2 = (1-(e_2/100)) * n_2

  #initial concentrations at source 2 with treatment
  c_t2 = ((1000*110000*c_15) + (1000*15000*c_ts2)) / ((1000*110000) + (1000*15000))
  b_t2 = ((1000*110000*b_15) + (1000*15000*b_ts2)) / ((1000*110000) + (1000*15000))
  n_t2 = ((1000*110000*n_15) + (1000*15000*n_ts2)) / ((1000*110000) + (1000*15000))

  #finding min
  min = 500
  for x in 1:36
    tc, tb, tn = do_conc(c_s, c_t2, b_t2, n_t2, k_a, k_c, k_n, x-1, u)
    if tc<min
      min = tc
    end
  end

return min
end

#all treatments and initializing
e_2 = 0:100;
C = zeros(101);

for n in 1:101
  C[n] = min(0, e_2[n], 10, 7.5, 5, 5, 5, 50, 35, 5, 45, 35, 0.55, 0.35, 0.25, 6)
end

z = 1;
while C[z] < 4
  global z += 1
end


round(C[z])
println(e_2[z])
```

The minimum level of treatment for waste stream 2 to achieve the 4 mg/L regulation is 
```julia
println(e_2[z])
```

## Problem 1.4
```julia
e = 0:100;
C = zeros(101);

for n in 1:101
  C[n] = min(e[n], e[n], 10, 7.5, 5, 5, 5, 50, 35, 5, 45, 35, 0.55, 0.35, 0.25, 6)
end

z = 1;
while C[z] < 4
  global z += 1
end

round(C[z])
println(e[z])

```

The minimum level of equal treatment for both waste streams to achieve the 4 mg/L regulation is 
```julia
println(e[z])
```



## Problem 1.5
From only the information I have, which are the concentrations and neeeded minimum treatment, I would probably opt to treat both waste streams equally.
This is because the needed minimum level of treatment for both waste streams equally is lower than that of just treating just stream 2, as seen in Problem 1.3 and 1.4. 


However, it is hard to say because there are many factors that also need to be considered. 
For example, I do not know if there are existing treatment plants at both waste streams. This could pose as a large fixed cost to build treatment plants. 
Additionally, there is no information about treatment costs and I would like to know how much it would cost to treat both streams.
With this information, I would chose the cheaper option.


I could also try to look for alternatives.
For example, I would look into varying the treatment of the two streams, depending on how concentrated the streams are. This could decrease cost if I decide to treat both streams.
For cost purposes, I could also look into differrent treatment methods like we did in Assignment 1.
I could also look into having the two streams deposit into a sigular treatment plant. This would be similar to treating both streams at the same efficiency, but only one treatment plant would be needed.
However, there may be additioinal costs to redirect the streams and capacity issues since one plant would need to treat two streams. 

## Problem 1.6
```julia
using Distributions

b_r= zeros(1000);
n_r= zeros(1000);
for x in 1:1000
  b_r[x]= rand(Uniform(4,7));
  n_r[x]= rand(Uniform(3,8));
end

C = zeros(1000);
for y in 1:1000
  C[y] = min(8, 8, 10, 7.5, b_r[y], n_r[y], 5, 50, 35, 5, 45, 35, 0.55, 0.35, 0.25, 6)
end

z = 0;
for i in 1:1000
  if C[i] < 4
    global z += 1
  end
end

p=z/1000*100;

println(p)
```

The probability that treating both waste streams equally would fail to keep the DO concentration above 4 mg/L is
```julia
println(p)
```

## Problem 1.7

```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end
```

```julia

correlated = sample_correlated_uniform(100, [4,7], [3,8]);

C = zeros(1000);
for y in 1:1000
  C[y] = min(8, 8, 10, 7.5, correlated[y,1], correlated[y,2], 5, 50, 35, 5, 45, 35, 0.55, 0.35, 0.25, 6)
end

z = 0;
for i in 1:1000
  if C[i] < 4
    global z += 1
  end
end

pc = z/1000*100; 

println(pc)
```

The probability that treating both waste streams equally would fail to keep the DO concentration above 4 mg/L is
```julia
println(pc)
```

## Problem 1.8
The presence of uncertainty and dependence between variables seemed to greatly increase the probability that DO concentration would fail to stay above 4 mg/L.
Because of this, I would not stick with the same strategy as I did in Problem 1.5. I would recommend to treat both waste streams at a higher level of efficiency than 8%.
As mentioned in Problem 1.5, another variable to consider would be treating the streams at different efficiencies based on their concentrations.
Their concentrations can vary due do differenct activities or different times of the year.
Additionally, another variable to consider is cost. Increasing the treatment efficiency will very likely increase the cost. 
Because of this, when picking an efficiency, I will need to make sure that the cost is reasonable.


```

# References
https://docs.julialang.org/en/v1/manual/variables-and-scoping/
http://juliastats.org/Distributions.jl/stable/univariate/#univariates

